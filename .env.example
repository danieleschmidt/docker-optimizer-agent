# Docker Optimizer Agent - Environment Configuration Template
# Copy this file to .env and update values as needed

# =============================================================================
# Core Application Settings
# =============================================================================

# Debug mode - set to true for development, false for production
DEBUG=false

# Log level - DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Application port for web interface (if enabled)
APP_PORT=8000

# =============================================================================
# Security Scanner Configuration
# =============================================================================

# Trivy configuration
TRIVY_DB_REPOSITORY=ghcr.io/aquasecurity/trivy-db
TRIVY_JAVA_DB_REPOSITORY=ghcr.io/aquasecurity/trivy-java-db
TRIVY_CACHE_DIR=/tmp/trivy-cache
TRIVY_TIMEOUT=300s

# Security scanning options
ENABLE_SECURITY_SCAN=true
SECURITY_FAIL_ON_CRITICAL=true
SECURITY_FAIL_ON_HIGH=false

# CVE database settings
CVE_DATABASE_URL=https://cve.circl.lu/api/cve
CVE_CACHE_TTL=3600

# =============================================================================
# Performance & Optimization Settings
# =============================================================================

# Caching configuration
ENABLE_OPTIMIZATION_CACHE=true
CACHE_SIZE_MB=256
CACHE_TTL_SECONDS=3600

# Parallel processing
MAX_WORKER_THREADS=4
ENABLE_PARALLEL_OPTIMIZATION=true

# Performance monitoring
ENABLE_PERFORMANCE_METRICS=true
METRICS_COLLECTION_INTERVAL=60

# =============================================================================
# Container Registry Configuration
# =============================================================================

# Docker Hub settings
DOCKER_HUB_USERNAME=
DOCKER_HUB_TOKEN=

# GitHub Container Registry
GITHUB_TOKEN=
GITHUB_REGISTRY=ghcr.io

# AWS ECR settings
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
ECR_REGISTRY_URI=

# Azure Container Registry
AZURE_CLIENT_ID=
AZURE_CLIENT_SECRET=
AZURE_TENANT_ID=
ACR_REGISTRY_URI=

# =============================================================================
# CI/CD Integration Settings
# =============================================================================

# GitHub Actions integration
GITHUB_ACTIONS_TOKEN=
GITHUB_REPOSITORY=
GITHUB_WORKFLOW_ID=

# GitLab CI integration
GITLAB_TOKEN=
GITLAB_PROJECT_ID=
GITLAB_PIPELINE_ID=

# Jenkins integration
JENKINS_URL=
JENKINS_USERNAME=
JENKINS_API_TOKEN=

# =============================================================================
# Monitoring & Observability
# =============================================================================

# Prometheus metrics
ENABLE_PROMETHEUS_METRICS=false
PROMETHEUS_PORT=9090
PROMETHEUS_NAMESPACE=docker_optimizer

# Application monitoring
ENABLE_APM=false
APM_SERVICE_NAME=docker-optimizer-agent
APM_ENVIRONMENT=development

# Datadog integration
DATADOG_API_KEY=
DATADOG_APP_KEY=
DATADOG_SITE=datadoghq.com

# New Relic integration
NEW_RELIC_LICENSE_KEY=
NEW_RELIC_APP_NAME=docker-optimizer-agent

# =============================================================================
# External API Configuration
# =============================================================================

# Snyk integration (optional, for additional security scanning)
SNYK_TOKEN=
SNYK_ORG_ID=

# Anchore integration (optional)
ANCHORE_CLI_URL=
ANCHORE_CLI_USER=
ANCHORE_CLI_PASS=

# =============================================================================
# Database Configuration (for enterprise features)
# =============================================================================

# PostgreSQL (for audit logs and analytics)
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=docker_optimizer
POSTGRES_USER=
POSTGRES_PASSWORD=

# Redis (for caching and job queues)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# =============================================================================
# File System & Storage
# =============================================================================

# Working directories
WORKING_DIR=/tmp/docker-optimizer
OUTPUT_DIR=/tmp/docker-optimizer/output
TEMP_DIR=/tmp/docker-optimizer/temp

# Storage backend (local, s3, gcs, azure)
STORAGE_BACKEND=local
STORAGE_BUCKET=
STORAGE_REGION=

# S3 configuration
S3_BUCKET=
S3_ACCESS_KEY=
S3_SECRET_KEY=
S3_REGION=us-east-1

# =============================================================================
# Security & Compliance
# =============================================================================

# Secret scanning
ENABLE_SECRET_SCANNING=true
SECRET_PATTERNS_FILE=config/secret-patterns.yml

# SBOM generation
ENABLE_SBOM_GENERATION=true
SBOM_FORMAT=spdx-json

# Compliance reporting
COMPLIANCE_STANDARDS=SOC2,PCI-DSS
COMPLIANCE_REPORT_FORMAT=json

# =============================================================================
# Development & Testing
# =============================================================================

# Test configuration
TEST_MODE=false
MOCK_SECURITY_SCAN=false
MOCK_REGISTRY_API=false

# Development features
ENABLE_DEBUG_ENDPOINTS=false
ENABLE_PROFILING=false
PROFILING_OUTPUT_DIR=/tmp/profiling

# =============================================================================
# Notification & Alerting
# =============================================================================

# Slack integration
SLACK_WEBHOOK_URL=
SLACK_CHANNEL=#docker-optimization
SLACK_USERNAME=docker-optimizer-bot

# Email notifications
SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM=noreply@terragonlabs.com

# Microsoft Teams
TEAMS_WEBHOOK_URL=

# =============================================================================
# Advanced Configuration
# =============================================================================

# Rate limiting
API_RATE_LIMIT=100
API_RATE_LIMIT_WINDOW=3600

# Request timeouts
HTTP_TIMEOUT=30
SCAN_TIMEOUT=300
BUILD_TIMEOUT=600

# Feature flags
ENABLE_EXPERIMENTAL_FEATURES=false
ENABLE_MULTI_STAGE_OPTIMIZATION=true
ENABLE_LANGUAGE_DETECTION=true
ENABLE_REALTIME_SUGGESTIONS=true

# Custom optimization presets
CUSTOM_PRESETS_DIR=config/presets
DEFAULT_OPTIMIZATION_PRESET=balanced

# =============================================================================
# Logging Configuration
# =============================================================================

# Log formatting
LOG_FORMAT=json
LOG_TIMESTAMP_FORMAT=ISO8601

# Log destinations
LOG_TO_FILE=true
LOG_FILE_PATH=/var/log/docker-optimizer/app.log
LOG_FILE_MAX_SIZE=100MB
LOG_FILE_BACKUP_COUNT=5

# Structured logging
ENABLE_STRUCTURED_LOGGING=true
LOG_CORRELATION_ID=true

# External log aggregation
ENABLE_LOG_SHIPPING=false
LOG_SHIPPER=fluentd
LOG_SHIPPER_ENDPOINT=http://localhost:24224