# Production Deployment Configuration for Docker Optimizer Agent
# Kubernetes production-ready deployment with global scaling

apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-optimizer-agent
  namespace: production
  labels:
    app: docker-optimizer-agent
    version: "1.0.0"
    tier: production
    component: optimization-service
spec:
  replicas: 3  # Production-ready with HA
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: docker-optimizer-agent
  template:
    metadata:
      labels:
        app: docker-optimizer-agent
        version: "1.0.0"
        tier: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: docker-optimizer
        image: docker-optimizer-agent:1.0.0-production
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: HIGH_THROUGHPUT_MODE
          value: "true"
        - name: GLOBAL_FEATURES_ENABLED
          value: "true"
        - name: DEFAULT_REGION
          value: "us-east-1"
        - name: COMPLIANCE_FRAMEWORKS
          value: "soc2,gdpr,iso27001"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: cache-volume
          mountPath: /app/cache
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: docker-optimizer-config
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      serviceAccountName: docker-optimizer-service-account
      securityContext:
        fsGroup: 1001

---
apiVersion: v1
kind: Service
metadata:
  name: docker-optimizer-service
  namespace: production
  labels:
    app: docker-optimizer-agent
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: docker-optimizer-agent

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: docker-optimizer-config
  namespace: production
data:
  production.yaml: |
    optimization:
      high_throughput_mode: true
      scaling_config: "high_performance"
      cache_enabled: true
      cache_ttl_seconds: 3600
      batch_processing: true
      max_batch_size: 100
    
    global_features:
      default_language: "en"
      enabled_languages: ["en", "es", "fr", "de", "ja", "zh"]
      default_region: "us-east-1"
      compliance_frameworks: ["soc2", "gdpr", "iso27001"]
      enable_rtl_support: false
    
    security:
      enable_advanced_scanning: true
      external_scanners: ["trivy", "grype"]
      policy_enforcement: true
      audit_logging: true
    
    performance:
      enable_monitoring: true
      metrics_enabled: true
      tracing_enabled: true
      performance_thresholds:
        max_execution_time_ms: 5000
        max_memory_usage_mb: 1024
        min_success_rate: 0.95
    
    logging:
      level: "INFO"
      format: "json"
      enable_structured_logging: true
      enable_audit_logging: true

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: docker-optimizer-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: docker-optimizer-agent
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: docker-optimizer-service-account
  namespace: production

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: docker-optimizer-network-policy
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: docker-optimizer-agent
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - {} # Allow all egress (can be restricted based on requirements)

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: docker-optimizer-pdb
  namespace: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: docker-optimizer-agent