[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "docker-optimizer-agent"
version = "0.1.0"
description = "LLM suggests minimal, secure Dockerfiles and explains each change"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragonlabs.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Installation/Setup",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "dockerfile-parse>=2.0.0",
    "requests>=2.28.0",
    "pyyaml>=6.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-PyYAML>=6.0.0",
    "pre-commit>=3.0.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "semgrep>=1.0.0",
]
trivy = [
    "trivy-python>=0.1.0",
]

[project.scripts]
docker-optimizer = "docker_optimizer.cli:main"
optimizer = "docker_optimizer.cli:main"

[project.urls]
Homepage = "https://github.com/terragonlabs/docker-optimizer-agent"
Repository = "https://github.com/terragonlabs/docker-optimizer-agent"
Issues = "https://github.com/terragonlabs/docker-optimizer-agent/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--cov=docker_optimizer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=85",
    "--strict-markers",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests requiring Docker",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S106", "S108"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true

[[tool.mypy.overrides]]
module = [
    "dockerfile_parse",
    "trivy_python",
    "psutil",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]