---
apiVersion: v1
kind: Namespace
metadata:
  name: docker-optimizer
  labels:
    name: docker-optimizer
    environment: production

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-optimizer
  namespace: docker-optimizer
  labels:
    app: docker-optimizer
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: docker-optimizer
  template:
    metadata:
      labels:
        app: docker-optimizer
        version: v1.0.0
    spec:
      containers:
      - name: docker-optimizer
        image: docker-optimizer:latest
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8080
          name: health
        - containerPort: 9090
          name: metrics
        env:
        - name: PERFORMANCE_MODE
          value: "high_throughput"
        - name: CONNECTION_POOL_SIZE
          value: "20"
        - name: WORKER_PROCESSES
          value: "auto"
        - name: CACHE_ENABLED
          value: "true"
        - name: CACHE_TTL
          value: "3600"
        - name: CACHE_MAX_SIZE
          value: "512MB"
        - name: METRICS_ENABLED
          value: "true"
        - name: METRICS_PORT
          value: "9090"
        - name: LOG_LEVEL
          value: "INFO"
        - name: TRACING_ENABLED
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true

---
apiVersion: v1
kind: Service
metadata:
  name: docker-optimizer-service
  namespace: docker-optimizer
  labels:
    app: docker-optimizer
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  - name: health
    port: 8080
    targetPort: 8080
  - name: metrics
    port: 9090
    targetPort: 9090
  selector:
    app: docker-optimizer

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: docker-optimizer-ingress
  namespace: docker-optimizer
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - docker-optimizer.example.com
    secretName: docker-optimizer-tls
  rules:
  - host: docker-optimizer.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: docker-optimizer-service
            port:
              number: 8000

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: docker-optimizer-hpa
  namespace: docker-optimizer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: docker-optimizer
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: docker-optimizer-config
  namespace: docker-optimizer
data:
  app.yaml: |
    server:
      port: 8000
      health_port: 8080
      metrics_port: 9090
    
    optimization:
      max_concurrent_jobs: 10
      timeout_seconds: 300
      cache_results: true
      cache_ttl_seconds: 3600
    
    security:
      enable_trivy: true
      scan_timeout_seconds: 120
      fail_on_high_severity: true
    
    monitoring:
      enable_metrics: true
      enable_tracing: true
      log_level: INFO
    
    scaling:
      min_instances: 2
      max_instances: 10
      target_cpu_percent: 70
      target_memory_percent: 80

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: docker-optimizer
  namespace: docker-optimizer

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: docker-optimizer
  name: docker-optimizer-role
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: docker-optimizer-binding
  namespace: docker-optimizer
subjects:
- kind: ServiceAccount
  name: docker-optimizer
  namespace: docker-optimizer
roleRef:
  kind: Role
  name: docker-optimizer-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: Secret
metadata:
  name: docker-optimizer-secrets
  namespace: docker-optimizer
type: Opaque
data:
  # Add your secrets here (base64 encoded)
  # api_key: <base64-encoded-api-key>
  # db_password: <base64-encoded-password>